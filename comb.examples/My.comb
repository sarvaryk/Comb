<?xml version="1.0" encoding="UTF-8"?>
<comb:Comb xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:comb="http://www.example.org/comb">
  <element xsi:type="comb:Always_" name="request_response" logicGroup="LTL">
    <subtreeInterpretations>Comb: G(!(request) || F(response))</subtreeInterpretations>
    <subtreeInterpretations>Spot: G(!(request) || F(response))</subtreeInterpretations>
    <subtreeInterpretations>Uppaal: [](!(request) or &lt;>(response))</subtreeInterpretations>
    <subtreeInterpretations>NuSMV: G(!(request) | F(response))</subtreeInterpretations>
    <subtreeInterpretations>Spin: [](!(request) || &lt;>(response))</subtreeInterpretations>
    <P xsi:type="comb:_implies_" name="_implies_" logicGroup="LTL">
      <subtreeInterpretations>Comb: !(request) || F(response)</subtreeInterpretations>
      <subtreeInterpretations>Spot: !(request) || F(response)</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: !(request) or &lt;>(response)</subtreeInterpretations>
      <subtreeInterpretations>NuSMV: !(request) | F(response)</subtreeInterpretations>
      <subtreeInterpretations>Spin: !(request) || &lt;>(response)</subtreeInterpretations>
      <P xsi:type="comb:Literal" name="request">
        <subtreeInterpretations>Comb: request</subtreeInterpretations>
        <subtreeInterpretations>Spot: request</subtreeInterpretations>
        <subtreeInterpretations>Uppaal: request</subtreeInterpretations>
        <subtreeInterpretations>NuSMV: request</subtreeInterpretations>
        <subtreeInterpretations>Spin: request</subtreeInterpretations>
      </P>
      <Q xsi:type="comb:Eventually_" name="new Eventually_" logicGroup="LTL">
        <subtreeInterpretations>Comb: F(response)</subtreeInterpretations>
        <subtreeInterpretations>Spot: F(response)</subtreeInterpretations>
        <subtreeInterpretations>Uppaal: &lt;>(response)</subtreeInterpretations>
        <subtreeInterpretations>NuSMV: F(response)</subtreeInterpretations>
        <subtreeInterpretations>Spin: &lt;>(response)</subtreeInterpretations>
        <P xsi:type="comb:Literal" name="response">
          <subtreeInterpretations>Comb: response</subtreeInterpretations>
          <subtreeInterpretations>Spot: response</subtreeInterpretations>
          <subtreeInterpretations>Uppaal: response</subtreeInterpretations>
          <subtreeInterpretations>NuSMV: response</subtreeInterpretations>
          <subtreeInterpretations>Spin: response</subtreeInterpretations>
        </P>
      </Q>
    </P>
  </element>
  <element xsi:type="comb:_untilWithin_" name="_untilWithin_" logicGroup="STL">
    <subtreeInterpretations>Comb: G(!G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r))))))))))) U[0, 10.5] G[0, 10.5](speed &lt; 55)</subtreeInterpretations>
    <subtreeInterpretations>Spot: &lt;Not all operands are supported for this output type></subtreeInterpretations>
    <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
    <subtreeInterpretations>NuSMV: &lt;Not all operands are supported for this output type></subtreeInterpretations>
    <subtreeInterpretations>Spin: &lt;Not all operands are supported for this output type></subtreeInterpretations>
    <P xsi:type="comb:Always_" name="new Always_" logicGroup="LTL">
      <subtreeInterpretations>Comb: G(!G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r)))))))))))</subtreeInterpretations>
      <subtreeInterpretations>Spot: G(!G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r)))))))))))</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
      <subtreeInterpretations>NuSMV: G(!G((q &amp; Fr) -> ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | (!G(!gtest) U r)))))))))))</subtreeInterpretations>
      <subtreeInterpretations>Spin: [](![]((q &amp;&amp; &lt;>r) -> ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || (![](!gtest) U r)))))))))))</subtreeInterpretations>
      <P xsi:type="comb:Not_" name="Not_" logicGroup="LTL" interpretation="!&lt;P>">
        <subtreeInterpretations>Comb: !G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r))))))))))</subtreeInterpretations>
        <subtreeInterpretations>Spot: !G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r))))))))))</subtreeInterpretations>
        <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
        <subtreeInterpretations>NuSMV: !G((q &amp; Fr) -> ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | (!G(!gtest) U r))))))))))</subtreeInterpretations>
        <subtreeInterpretations>Spin: ![]((q &amp;&amp; &lt;>r) -> ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || (![](!gtest) U r))))))))))</subtreeInterpretations>
        <P xsi:type="comb:BoundedExistenceBetween_and_" name="new BoundedExistenceBetween_and_" logicGroup="LTL" interpretation="G((&lt;Q> &amp;&amp; F&lt;R>) -> ((!&lt;P> &amp;&amp; !&lt;R>) U (&lt;R> || ((&lt;P> &amp;&amp; !&lt;R>) U (&lt;R> || ((!&lt;P> &amp;&amp; !&lt;R>) U (&lt;R> || ((&lt;P> &amp;&amp; !&lt;R>) U (&lt;R> || (!&lt;P> U &lt;R>))))))))))">
          <subtreeInterpretations>Comb: G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r))))))))))</subtreeInterpretations>
          <subtreeInterpretations>Spot: G((q &amp;&amp; Fr) -> ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || ((!G(!gtest) &amp;&amp; !r) U (r || ((G(!gtest) &amp;&amp; !r) U (r || (!G(!gtest) U r))))))))))</subtreeInterpretations>
          <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
          <subtreeInterpretations>NuSMV: G((q &amp; Fr) -> ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | ((!G(!gtest) &amp; !r) U (r | ((G(!gtest) &amp; !r) U (r | (!G(!gtest) U r))))))))))</subtreeInterpretations>
          <subtreeInterpretations>Spin: []((q &amp;&amp; &lt;>r) -> ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || ((![](!gtest) &amp;&amp; !r) U (r || (([](!gtest) &amp;&amp; !r) U (r || (![](!gtest) U r))))))))))</subtreeInterpretations>
          <P xsi:type="comb:AbsenceGlobally_" name="new AbsenceGlobally_" logicGroup="LTL" interpretation="G(!&lt;P>)">
            <subtreeInterpretations>Comb: G(!gtest)</subtreeInterpretations>
            <subtreeInterpretations>Spot: G(!gtest)</subtreeInterpretations>
            <subtreeInterpretations>Uppaal: [](notgtest)</subtreeInterpretations>
            <subtreeInterpretations>NuSMV: G(!gtest)</subtreeInterpretations>
            <subtreeInterpretations>Spin: [](!gtest)</subtreeInterpretations>
            <P xsi:type="comb:Literal" name="GTest">
              <subtreeInterpretations>Comb: gtest</subtreeInterpretations>
              <subtreeInterpretations>Spot: gtest</subtreeInterpretations>
              <subtreeInterpretations>Uppaal: gtest</subtreeInterpretations>
              <subtreeInterpretations>NuSMV: gtest</subtreeInterpretations>
              <subtreeInterpretations>Spin: gtest</subtreeInterpretations>
            </P>
          </P>
          <Q xsi:type="comb:Literal" name="Q">
            <subtreeInterpretations>Comb: q</subtreeInterpretations>
            <subtreeInterpretations>Spot: q</subtreeInterpretations>
            <subtreeInterpretations>Uppaal: q</subtreeInterpretations>
            <subtreeInterpretations>NuSMV: q</subtreeInterpretations>
            <subtreeInterpretations>Spin: q</subtreeInterpretations>
          </Q>
          <R xsi:type="comb:Literal" name="R">
            <subtreeInterpretations>Comb: r</subtreeInterpretations>
            <subtreeInterpretations>Spot: r</subtreeInterpretations>
            <subtreeInterpretations>Uppaal: r</subtreeInterpretations>
            <subtreeInterpretations>NuSMV: r</subtreeInterpretations>
            <subtreeInterpretations>Spin: r</subtreeInterpretations>
          </R>
        </P>
      </P>
    </P>
    <Q xsi:type="comb:AlwaysWithin_" name="AlwaysWithin_" logicGroup="STL">
      <subtreeInterpretations>Comb: G[0, 10.5](speed &lt; 55)</subtreeInterpretations>
      <subtreeInterpretations>Spot: &lt;Not all operands are supported for this output type></subtreeInterpretations>
      <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
      <subtreeInterpretations>NuSMV: &lt;Not all operands are supported for this output type></subtreeInterpretations>
      <subtreeInterpretations>Spin: &lt;Not all operands are supported for this output type></subtreeInterpretations>
      <P xsi:type="comb:_lessThan_" name="_lessThan_" logicGroup="STL">
        <subtreeInterpretations>Comb: speed &lt; 55</subtreeInterpretations>
        <subtreeInterpretations>Spot: &lt;Not all operands are supported for this output type></subtreeInterpretations>
        <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
        <subtreeInterpretations>NuSMV: &lt;Not all operands are supported for this output type></subtreeInterpretations>
        <subtreeInterpretations>Spin: &lt;Not all operands are supported for this output type></subtreeInterpretations>
        <P name="speed">
          <subtreeInterpretations>Comb: speed</subtreeInterpretations>
          <subtreeInterpretations>Spot: speed</subtreeInterpretations>
          <subtreeInterpretations>Uppaal: speed</subtreeInterpretations>
          <subtreeInterpretations>NuSMV: speed</subtreeInterpretations>
          <subtreeInterpretations>Spin: speed</subtreeInterpretations>
        </P>
        <Q name="55">
          <subtreeInterpretations>Comb: 55</subtreeInterpretations>
          <subtreeInterpretations>Spot: 55</subtreeInterpretations>
          <subtreeInterpretations>Uppaal: 55</subtreeInterpretations>
          <subtreeInterpretations>NuSMV: 55</subtreeInterpretations>
          <subtreeInterpretations>Spin: 55</subtreeInterpretations>
        </Q>
      </P>
      <H name="10.5">
        <subtreeInterpretations>Comb: 10.5</subtreeInterpretations>
        <subtreeInterpretations>Spot: 10.5</subtreeInterpretations>
        <subtreeInterpretations>Uppaal: 10.5</subtreeInterpretations>
        <subtreeInterpretations>NuSMV: 10.5</subtreeInterpretations>
        <subtreeInterpretations>Spin: 10.5</subtreeInterpretations>
      </H>
    </Q>
    <H name="10.5">
      <subtreeInterpretations>Comb: 10.5</subtreeInterpretations>
      <subtreeInterpretations>Spot: 10.5</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: 10.5</subtreeInterpretations>
      <subtreeInterpretations>NuSMV: 10.5</subtreeInterpretations>
      <subtreeInterpretations>Spin: 10.5</subtreeInterpretations>
    </H>
  </element>
  <element xsi:type="comb:Always_" name="new Always_" logicGroup="LTL">
    <subtreeInterpretations>Comb: G(false)</subtreeInterpretations>
    <subtreeInterpretations>Spot: G(false)</subtreeInterpretations>
    <subtreeInterpretations>Uppaal: [](false)</subtreeInterpretations>
    <subtreeInterpretations>NuSMV: G(false)</subtreeInterpretations>
    <subtreeInterpretations>Spin: [](false)</subtreeInterpretations>
    <P xsi:type="comb:Literal" name="false">
      <subtreeInterpretations>Comb: false</subtreeInterpretations>
      <subtreeInterpretations>Spot: false</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: false</subtreeInterpretations>
      <subtreeInterpretations>NuSMV: false</subtreeInterpretations>
      <subtreeInterpretations>Spin: false</subtreeInterpretations>
    </P>
  </element>
  <element xsi:type="comb:_until_" name="not_spawn_until_init" logicGroup="LTL">
    <subtreeInterpretations>Comb: !(spawn) U init</subtreeInterpretations>
    <subtreeInterpretations>Spot: !(spawn) U init</subtreeInterpretations>
    <subtreeInterpretations>Uppaal: &lt;Not all operands are supported for this output type></subtreeInterpretations>
    <subtreeInterpretations>NuSMV: !(spawn) U init</subtreeInterpretations>
    <subtreeInterpretations>Spin: !(spawn) U init</subtreeInterpretations>
    <P xsi:type="comb:Not_" name="Not_" logicGroup="LTL">
      <subtreeInterpretations>Comb: !(spawn)</subtreeInterpretations>
      <subtreeInterpretations>Spot: !(spawn)</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: not(spawn)</subtreeInterpretations>
      <subtreeInterpretations>NuSMV: !(spawn)</subtreeInterpretations>
      <subtreeInterpretations>Spin: !(spawn)</subtreeInterpretations>
      <P xsi:type="comb:Literal" name="spawn">
        <subtreeInterpretations>Comb: spawn</subtreeInterpretations>
        <subtreeInterpretations>Spot: spawn</subtreeInterpretations>
        <subtreeInterpretations>Uppaal: spawn</subtreeInterpretations>
        <subtreeInterpretations>NuSMV: spawn</subtreeInterpretations>
        <subtreeInterpretations>Spin: spawn</subtreeInterpretations>
      </P>
    </P>
    <Q xsi:type="comb:Literal" name="init">
      <subtreeInterpretations>Comb: init</subtreeInterpretations>
      <subtreeInterpretations>Spot: init</subtreeInterpretations>
      <subtreeInterpretations>Uppaal: init</subtreeInterpretations>
      <subtreeInterpretations>NuSMV: init</subtreeInterpretations>
      <subtreeInterpretations>Spin: init</subtreeInterpretations>
    </Q>
  </element>
</comb:Comb>
